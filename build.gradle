buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "covers1624"
            url = "http://maven.covers1624.net/"
        }
        maven {
            name = "covers1624"
            url = "http://mavenmirror.covers1624.net/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

group = "codechicken"
archivesBaseName = "CodeChickenCore"

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

repositories {
    maven {
        name = "Covers1624 Repo"
        url = "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:deobf"
}

version = "${project.config.mod_version}." + System.getenv("BUILD_NUMBER") ?: "1"

println config.mc_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = config.mc_version + "-" + config.forge_version
    mappings = config.mappings
    runDir = "run"
    replace '${mod_version}', project.config.mod_version
    makeObfSourceJar = false
}

processResources {
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc_version", config.mc_version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'version': project.version, 'mc_version': config.mc_version
    }

    // Move access transformer to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

def commonManifest = {
    attributes 'FMLCorePluginContainsFMLMod': 'true'
    attributes 'FMLAT': 'ccc_at.cfg'
    attributes 'CCTransformerExclusions' : 'codechicken.core.launch.FingerprintChecker'
}

jar {
    classifier = 'universal'
    manifest commonManifest
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    // onlyIf { // Skip the task if our secret data isn't available
    //     project.hasProperty('keyStore')
    // }

    // keyStore = project.keyStore // This needs to be a path to the keystore file
    // alias = project.keyStoreAlias
    // storePass = project.keyStorePass
    // keyPass = project.keyStoreKeyPass
    // inputFile = jar.archivePath
    // outputFile = jar.archivePath
}

build.dependsOn signJar

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

// Configure an upload task.
uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'CodeChickenCore'
                        url 'https://github.com/TheCBProject/CodeChickenCore'
                        scm {
                            url 'https://github.com/TheCBProject/CodeChickenCore'
                            connection 'scm:git:git@github.com:TheCBProject/CodeChickenCore.git'
                            developerConnection 'scm:git:git@github.com:TheCBProject/CodeChickenCore.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/TheCBProject/CodeChickenCore/issues'
                        }
                        licenses {
                            license {
                                name 'License'
                                url 'https://raw.githubusercontent.com/TheCBProject/CodeChickenCore/master/LICENSE.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'chicken-bones'
                                name 'chicken-bones'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}
